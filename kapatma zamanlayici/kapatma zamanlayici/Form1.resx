<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERESktv4PbSpFl1uGybIA
        AAAASUVORK5CYII=
</value>
  </data>
</root>